class triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def perimetr(self):
        return self.a + self.b + self.c

    def square(self):
        p = (self.a + self.b + self.c) / 2
        S2 = p * (p - self.a) * (p - self.b) * (p - self.c)
        assert S2 > 0
        return S2 ** (1/2)

class kvadrat:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def perimetr(self):
        return (self.a + self.b) * 2

    def square(self):
        return self.a * self.b

class trapetsia:
    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d

    def perimetr(self):
        return self.a + self.b + self.c + self.d

    def square(self):
        p = (self.a + self.b + self.c + self.d) / 2
        S2 = p * (p - self.a) * (p - self.b) * (p - self.c) * (p - self.d)
        assert S2 > 0
        return S2 ** (1/2)

class paralelogram:
    def __init__(self, a, b, h):
        self.a = a
        self.b = b
        self.h = h

    def perimetr(self):
        return (self.a + self.b) * 2

    def square(self):
        assert self.b >= self.h
        return self.a * self.h

class krug:
    def __init__(self, a):
        self.a = a

    def dovzhina(self):
        from math import pi
        return 2 * pi * self.a

    def square(self):
        from math import pi
        return (self.a) ** 2 * pi

l = []
class triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def perimetr(self):
        return self.a + self.b + self.c

    def square(self):
        p = (self.a + self.b + self.c) / 2
        S2 = p * (p - self.a) * (p - self.b) * (p - self.c)
        assert S2 > 0
        return S2 ** (1/2)

class kvadrat:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def perimetr(self):
        return (self.a + self.b) * 2

    def square(self):
        return self.a * self.b

class trapetsia:
    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d

    def perimetr(self):
        return self.a + self.b + self.c + self.d

    def square(self):
        p = (self.a + self.b + self.c + self.d) / 2
        S2 = p * (p - self.a) * (p - self.b) * (p - self.c) * (p - self.d)
        assert S2 > 0
        return S2 ** (1/2)

class paralelogram:
    def __init__(self, a, b, h):
        self.a = a
        self.b = b
        self.h = h

    def perimetr(self):
        return (self.a + self.b) * 2

    def square(self):
        assert self.b >= self.h
        return self.a * self.h

class krug:
    def __init__(self, a):
        self.a = a

    def dovzhina(self):
        from math import pi
        return 2 * pi * self.a

    def square(self):
        from math import pi
        return (self.a) ** 2 * pi


l = []
l1 = []
l2 = []
l3 = []
l4 = []


x = input()
with open(x) as f:
        for line in f:
            r = line.strip().split()
            if r[0] == 'Triangle':
                a = triangle(int(r[1]), int(r[2]), int(r[3]))
                if a.perimetr() != None:
                    l.append(a.perimetr())
            elif r[0] == 'Rectangle':
                a1 = kvadrat(int(r[1]), int(r[2]))
                if a1.perimetr() != None:
                    l1.append(a1.perimetr())
            elif r[0] == 'Trapeze':
                a2 = trapetsia(int(r[1]), int(r[2]), int(r[3]), int(r[4]))
                if a2.perimetr() != None:
                    l2.append(a2.perimetr())
            elif r[0] == 'Parallelogram':
                a3 = paralelogram(int(r[1]), int(r[2]), int(r[3]))
                if a3.perimetr() != None:
                    l3.append(a3.perimetr())
            elif r[0] == 'Circle':
                a4 = krug(int(r[1]))
                if a4.dovzhina() != None:
                    l4.append(a4.dovzhina())
def maxpersqr():
    l.sort()
    l.reverse()
    d = {'Triangle': l[0]}
    l1.sort()
    l1.reverse()
    d.update({'Rectangle': l1[0]})
    l2.sort()
    l2.reverse()
    d.update({'Trapeze': l2[0]})
    l3.sort()
    l3.reverse()
    d.update({'Parallelogram': l3[0]})
    l4.sort()
    l4.reverse()
    d.update({'Circle': l4[0]})
    l.clear()
    l1.clear()
    l2.clear()
    l3.clear()
    l4.clear()
    def get_key(value):
        for key,val in d.items():
            if val == value:
                return key
    a = max(d.values())
    b = get_key(a)
    d = {b : a}
    return d
print("max per", maxpersqr())

with open(x) as f:
        for line in f:
            r = line.strip().split()
            if r[0] == 'Triangle':
                a = triangle(int(r[1]), int(r[2]), int(r[3]))
                if a.square() != None:
                    l.append(a.square())
            elif r[0] == 'Rectangle':
                a1 = kvadrat(int(r[1]), int(r[2]))
                if a1.square() != None:
                    l1.append(a1.square())
            elif r[0] == 'Trapeze':
                a2 = trapetsia(int(r[1]), int(r[2]), int(r[3]), int(r[4]))
                if a2.square() != None:
                    l2.append(a2.square())
            elif r[0] == 'Parallelogram':
                a3 = paralelogram(int(r[1]), int(r[2]), int(r[3]))
                if a3.square() != None:
                    l3.append(a3.square())
            elif r[0] == 'Circle':
                a4 = krug(int(r[1]))
                if a4.square() != None:
                    l4.append(a4.square())
print('max square', maxpersqr())

